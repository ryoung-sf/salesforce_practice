#!/usr/bin/env ruby
require "optparse"

def setup
  log "Installing gems"
  # Only do  bundle install if the much-faster
  # bundle check indicates we need to
  system! "bundle check || bundle install"
  
  log "Dropping & creating the development database"
  # Note that the very first time this runs, db:reset
  # will fail, buth this failure is fixed by
  # doing a db:migrate
  system! "bin/rails db:reset || bin/rails db:migrate"
  
  log "Dropping & recreating the test database"
  # setting the RAILS_ENV explicitly to be sure
  # we actually rest the test database
  system!({ "RAILS_ENV" => "test"}, "bin/rails db:reset")
  
  log "All set up."
  log ""
  log "To see commonly-needed commands, run:"
  log ""
  log "     bin/setup help"
  log ""
end

def help
  puts "Usage: #{$0}"
  puts ""
  puts "Installs gems, recreates dev database, and generally"
  puts "prepares the app to run locally"
  puts ""
  puts "Other useful commands:"
  puts ""
  puts "  bin/dev"
  puts "     # run app locally"
  puts "  LOGRAGE_IN_DEVELOPMENT=true bin/dev"
  puts "      # run app locally using"
  puts "      # production-like logging"
  puts ""
  puts "  bin/ci"
  puts "    # run all tests and checks as CI would"
  puts ""
  puts "  bin/rails test"
  puts "    # run non-system tests"
  puts ""
  puts "  bin/rails test:system"
  puts "    # run system tests"
  puts ""
  puts "  bin/setup help"
  puts "    # show this help"
  puts ""
end

# Start of helpers
def system!(*args)
  log "Executing #{args}"
  if system(*args)
    log "#{args} succeded"
  else
    log "#{args} failed"
    abort
  end
end

def log(message)
  puts "[ bin/setup ] #{message}"
end

OptionParser.new do |parser|
  parser.on("-h", "--help") do
    help
    exit
  end
end.parse!

if ARGV[0] == "help"
  help
elsif !ARGV[0].nil?
  puts "Unknown argument: '#{ARGV[0]}'"
  exit 1
else
  setup
end
# require "fileutils"

# APP_ROOT = File.expand_path("..", __dir__)

# def system!(*args)
#   system(*args, exception: true)
# end
# FileUtils.chdir APP_ROOT do
#   # This script is a way to set up or update your development environment automatically.
#   # This script is idempotent, so that you can run it at any time and get an expectable outcome.
#   # Add necessary setup steps to this file.

#   puts "== Installing dependencies =="
#   system("bundle check") || system!("bundle install")

#   # puts "\n== Copying sample files =="
#   # unless File.exist?("config/database.yml")
#   #   FileUtils.cp "config/database.yml.sample", "config/database.yml"
#   # end
  
#   log "Dropping & creating the development database"
#   # Note that the very first time this runs, db:reset
#   # will fail, buth this failure is fixed by
#   # doing a db:migrate
#   system! "bin/rails db:reset || bin/rails db:migrate"

#   log "Dropping & recreating the test database"
#   # setting the RAILS_ENV explicitly to be sure
#   # we actually rest the test database
#   system!({ "RAILS_ENV" => "test"}, "bin/rails db:reset")

#   puts "\n== Removing old logs and tempfiles =="
#   system! "bin/rails log:clear tmp:clear"

#   unless ARGV.include?("--skip-server")
#     puts "\n== Starting development server =="
#     STDOUT.flush # flush the output before exec(2) so that it displays
#     exec "bin/dev"
#   end
# end
